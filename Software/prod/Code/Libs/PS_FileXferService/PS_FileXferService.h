#ifndef PS_FILE_XFER_SERVICE_H_
#define PS_FILE_XFER_SERVICE_H_

#include "Arduino.h"

#include <BLEDevice.h>
#include <BLEServer.h>
#include <BLEUtils.h>
#include <BLE2902.h>

#include "../PS_FFat/PS_FFat.h"
#include "../Config/config.h"

//#define SERVICE_UUID //Autogenerated from config.h 
//      (if stays the same linux drivers will not recognize updates
#define SERIAL_CHAR_UUID  "beb5483e-36e1-4688-b7f5-ea07361b26a8"
#define READ_CHAR_UUID "b1d3c2c4-7553-11ec-90d6-0242ac120003"

#define BLE_MSG_LEN 500

class PS_FileXferService {
    public:
        static void createService(BLEServer* p_BLE_Server); 
    private:
        static BLEService* p_fileXferService;
};

class PS_FileXferReadChar {
    typedef enum FileXferReadStatus {PAUSED, STARTING, SEND_MSG, WAIT_RESP, FINISHED, FAILED} XferStatus;
    public:
        static void createCharacteristic(BLEService* p_service);
        static void onConnect();
        static void whileConnect();
        static void onDisconnect();
    private:
        static BLECharacteristic* p_readChar;

        static volatile XferStatus fileXferStatus;
        static uint8_t p_xferBuffer[BLE_MSG_LEN];
        static size_t xferBufferLen;
        static size_t offset;
        static size_t fileSize;

        class characteristicCallbacks : public BLECharacteristicCallbacks{
            void onStatus(BLECharacteristic* p_characteristic, Status s, uint32_t code);
        };
        class descCallbacks : public BLEDescriptorCallbacks {
            void onWrite(BLEDescriptor* p_descriptor);
        };
};

#endif /* FXFER_SERVICE_H_ */

