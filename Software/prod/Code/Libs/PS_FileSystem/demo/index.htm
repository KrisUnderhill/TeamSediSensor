<!DOCTYPE html>
<html lang="en" >
<head>
  <meta charset="UTF-8">
  <title>TSS DEMO</title>
  <script src="http://tss.local/demo/chart.js"></script>
  <script src="http://tss.local/demo/moment.js"></script>
  <script src="http://tss.local/demo/chartjs_plugin_annotation_min.js"></script>

</head>
<body>
<!-- partial:index.partial.html -->
<div>
  <canvas id="myChart" width="400" height="200">Your browser does not support the canvas element.</canvas>
</div>

<script>
  const data = {
    // labels: [new Date()],
    datasets: [{
      // label: 'My First Dataset',
      // data: [{
      //   x: new Date().toISOString(),
      //   y: 40
      // }],
      data: [{
        x: new Date().toISOString(),
        y: 0
      }],
      fill: false,
      backgroundColor: 'rgb(44, 50, 45, 0.5)',
      borderColor: 'rgb(44, 50, 45)',
    }]
  };
  // console.log(data)
  const config = {
    type: 'line',
    data: data,
    options: {
      plugins: {
        autocolors: false,
        // extra lines
        annotation: {
          annotations: {
            //Extreme Line
            line1: {
              label: {
                content: 'EXTREME RISK',
                color: 'white',
                backgroundColor: 'rgb(242, 82, 82)',
                enabled: true,
                position: 'start'
              },
              type: 'line',
              yMin: 400,
              yMax: 400,
              borderColor: 'rgb(242, 82, 82, 0.15)',
              borderWidth: 150,
            },
            //High Line
            line2: {
              label: {
                content: 'HIGH RISK',
                color: 'white',
                backgroundColor: 'rgb(242, 148, 34)',
                enabled: true,
                position: 'start'
              },
              type: 'line',
              yMin: 200,
              yMax: 200,
              borderColor: 'rgb(242, 148, 34, 0.15)',
              borderWidth: 0,
            },
            //Good Line
            line3: {
              label: {
                content: 'LOW RISK',
                color: 'white',
                backgroundColor: 'rgb(27, 242, 163)',
                enabled: true,
                position: 'start'
              },
              type: 'line',
              yMin: 5,
              yMax: 5,
              borderColor: 'rgb(27, 242, 163, 0.15)',
              borderWidth: 80,
            }
          }
        },
        
        //No Legend and add Title
        legend: {
          display: false
        },
        title: {
          display: true,
          text: 'Team 09: Sedi Sensor Turbidity',
          font: {
              size: 20,
              family: 'Helvetica'
            }
        }
      },
      
      //Padding for graph
      layout: {
        padding: {
          left: 50,
          right: 50
        }
      },
      
      //time scale setup with axes
      scales: {
        x: {
          grid: {
            display: false
          },
          type: 'time',
          time: {
            displayFormats: {
              second: 'mm:ss'
            },
            unit: 'second'
          },
          title: {
            display: true,
            text: 'Time (min:sec)'
          }
        },
        y: {
          title: {
            display: true,
            text: 'Turbidity (NTU)',
            
          }
        },
      },
      
      //curvy line
      elements: {
        line: {
          cubicInterpolationMode: 'monotone'
        },
      }
    },
  };
</script>

<script>
  Chart.defaults.font.size = 12;
  Chart.defaults.font.family = 'Helvetica';
  const ctx = document.getElementById('myChart');
  const myChart = new Chart(ctx,
    config
  );
</script>

<style>
  .button {
    background-color: #F25D50;
    /* Green */
    border: none;
    color: white;
    padding: 4px 12px;
    text-align: center;
    text-decoration: none;
    display: inline-block;
    font-size: 14px;
    margin: 0px 0px 0px 50px;
    transition-duration: 0.4s;
    cursor: pointer;
    font-family: 'Verdana';
  }

  .button1 {
    background-color: white;
    color: grey;
    border: 3px solid #F25252;
    border-radius: 5px;
  }

  .button1:hover {
    background-color: #F25252;
    color: white;
  }
</style>


<!-- <button id="myBtn" class="button button1">New Data</button>
<input id="newDataText" type="number"></input> -->

<!-- Button Press/Random Data Adding Script -->
<script>
//   document.getElementById("myBtn").addEventListener("click", (event) => {
//     const data = myChart.data;
//     const date = new Date();
//     if (data.datasets.length > 0) {
//       // data.labels.push(date);
//       data.datasets[0].data.push({
//         x: new Date().toISOString(),
//         y: document.getElementById("newDataText").value
//       });
      
//       myChart.update();
      
//       //only having so much data on chart
//       if (data.datasets[0].data.length > 10){
//         data.datasets[0].data.shift();
//       }
//     }
//   });

  
  //Random points being set every interval
  
  function requestUpdate() {
      const Http = new XMLHttpRequest();
      const url = "http://tss.local/measure.txt";
      Http.open("GET", url);
      Http.send();

      Http.onreadystatechange = (e)=> {
          if(!!Http.responseText){
              const DATA_INDEX = 11; 
              const errorRegex = /ERROR 404/g;
              if(errorRegex.test(Http.responseText)){
                  console.log("Saw ERRROR");
                  return;
              }
              var measureArr = Http.responseText.trim().split(',');
              console.log(measureArr);
              const data = myChart.data;
              const date = new Date();
              if (data.datasets.length > 0) {
                data.datasets[0].data.push({
                  x: new Date().toISOString(),
                  y: measureArr[DATA_INDEX]
                });
                console.log(data.datasets[0].data.length);
                myChart.update();
                
                //only having so much data on chart
                if (data.datasets[0].data.length > 20){
                  data.datasets[0].data.shift();
                }
              }
          }
      }
      setTimeout(requestUpdate, 2000);
  }
  requestUpdate();

</script>

<!-- <body style="background-color:rgb(255,254,252);"></body> -->
<!-- partial -->
  
</body>
</html>
