# Rakefile for test_WIFIexample of TeamSediSensor building for the ESP32 devkit-v1 board
require 'fileutils'
require 'os'

$OS_Config = {
  fullPath: Dir.getwd,
  buildPath: File.join(Dir.getwd, "Build"),
  codePath: File.join(Dir.getwd, "Code"),
  dirName: File.basename(Dir.getwd),
  filePath: File.join(Dir.getwd, "Code", "#{File.basename(Dir.getwd)}.ino")
}

if OS.windows?
  $OS_Config[:arduinoCmd] = "arduino_debug"
  arduinoConfigPath = `echo %LOCALAPPDATA%`
  arduinoConfigPath.delete!("\n")
  arduinoConfigPath.tr!("\\", "/")
  userPath = `echo %USERHOME%`
  userPath.delete!("\n")
  userPath.tr!("\\", "/")
  $OS_Config[:libPath] = File.join(userPath, "Arduino", "libraries")
  $OS_Config[:prefPath] = File.join(arduinoConfigPath, "Arduino15")
  $OS_Config[:serialPort] = "COM4"
  $OS_Config[:osType] = "Windows"
elsif OS.mac?
  $OS_Config[:arduinoCmd] = "Arduino.app/Contents/MacOS/Arduino"
  $OS_Config[:libPath] = File.join(File.expand_path("~/Arduino"), "libraries")
  $OS_Config[:prefPath] = File.join(File.expand_path("~/Library"), "Arduino15")
  $OS_Config[:serialPort] = "/dev/ttyACM0"
  $OS_Config[:osType] = "Mac"
else
  $OS_Config[:arduinoCmd] = "arduino"
  $OS_Config[:libPath] = File.join(File.expand_path("~/Arduino"), "libraries")
  $OS_Config[:prefPath] = File.join(File.expand_path("~"), ".arduino15")
  $OS_Config[:serialPort] = "/dev/ttyUSB0"
  $OS_Config[:osType] = "Linux"
end

namespace "app" do

  desc 'Copy library folders to expected Arduino Path'
  task :copyLibs do
    FileUtils.cp_r(Dir.glob("Code/Libs/*"), $OS_Config[:libPath])
  end

  desc 'create build directory if it does not exist already'
  task :setBuildPath do
    unless Dir.exist?("Build")
      Dir.mkdir("Build")
    end

    # set preferences
    # Use file commands to set pref
    foundLine = false
    File.foreach(File.join($OS_Config[:prefPath], "preferences.txt")) do |line|
      if line.match?(/build.path=/)
        foundLine = true
        unless line.match?(/build.path=#{$OS_Config[:buildPath]}/)
          system "#{$OS_Config[:arduinoCmd]} --pref build.path=#{$OS_Config[:buildPath]} --board esp32:esp32:esp32doit-devkit-v1 --save-prefs" 
        end
        break
      end
    end

    if !foundLine
      system "#{$OS_Config[:arduinoCmd]} --pref build.path=#{$OS_Config[:buildPath]} --board esp32:esp32:esp32doit-devkit-v1 --save-prefs" 
    end

    # Set pref with arduino commands
    # This is probably a better way of doing it but much slower since it has to load java the whole time
    #checkPrefCmd = "#{$OS_Config[:arduinoCmd]} --get-pref build.path"
    #currBuildPath = `#{checkPrefCmd}`
    #unless currBuildPath.match?(/build.path=#{$OS_Config[:buildPath]}/)
    #  system "#{$OS_Config[:arduinoCmd]} --pref build.path=#{$OS_Config[:buildPath]} --board esp32:esp32:esp32doit-devkit-v1 --save-prefs" 
    #end
  end

  desc 'build the main .ino arduino program'
  task build: %w[setBuildPath copyLibs] do
    # build the main .ino arduino program
    # create build cmd string
    buildCmd = "#{$OS_Config[:arduinoCmd]} --board esp32:esp32:esp32doit-devkit-v1 --preserve-temp-files -v --verify #{$OS_Config[:filePath]}"
    
    buildTime = File.mtime($OS_Config[:buildPath])
    codeTime  = File.mtime($OS_Config[:codePath])

    # exec buildCmd
    if codeTime > buildTime
      system buildCmd
    elsif Dir.empty?($OS_Config[:buildPath])
      system buildCmd
    else
      puts "Binary is up to date"
    end
  end

  desc 'flash the binary to the micro'
  task flash: %[setBuildPath] do # This should depend on build but since arduino cmd automatically rebuilds anyway 
    flashCmd = "#{$OS_Config[:arduinoCmd]} --port #{$OS_Config[:serialPort]} --upload #{$OS_Config[:filePath]} --board esp32:esp32:esp32doit-devkit-v1 --preserve-temp-files -v"
    system flashCmd
  end

  desc 'flash using esp tool'
  task esp32flash: [:setBuildPath, :build] do
    binPath = File.join($OS_Config[:buildPath], "#{$OS_Config[:dirName]}")
    if $OS_Config[:osType].match?("Windows")
      ext = "exe"
    else
      ext = "py" # idk if Mac uses python or executable
    end
    espToolPath = "#{$OS_Config[:prefPath]}/packages/esp32/tools/esptool_py/3.0.0/esptool.#{ext}"
    espLibPath  = "#{$OS_Config[:prefPath]}/packages/esp32/hardware/esp32/1.0.6/tools"

    flashCmd = <<~STRING.delete("\n")
      #{$OS_Config[:osType].match?("Windows") ? "" : "python3"} #{espToolPath} --chip esp32 --port #{$OS_Config[:serialPort]} 
      --baud 921600 --before default_reset --after hard_reset write_flash -z --flash_mode dio 
      --flash_freq 80m --flash_size detect 0xe000 #{espLibPath}/partitions/boot_app0.bin 0x1000 
      #{espLibPath}/sdk/bin/bootloader_dio_80m.bin 0x10000 #{binPath}.ino.bin 0x8000 #{binPath}.ino.partitions.bin 
    STRING
    # This has a lot of extra functionality possibly useful
    system flashCmd
  end
end

namespace "comms" do 
  desc 'open serial window to the ESP32'
  task :serial do 
    # screen manual
    #   -S - set name
    #   /dev/ttyUSB0 - linux USB port the device is *probably* out of 
    #   115200 - baudrate of the connection
    # In Use
    #   C-a k - kill the screen
    #   C-a d - deattach the screen
    # Other Commands
    #   screen -ls : List existing (detatched screens)
    #   screen -R : reattach to existing detatched screens
    if $OS_Config[:osType].match?("Windows")
      exec "putty -serial #{$OS_Config[:serialPort]} -sercfg 115200"
    else
      exec "screen -S teamSediSensor_ESP32_Prog #{$OS_Config[:serialPort]} 115200"
    end
  end
end

desc 'Remove build directory'
task :clean do
  FileUtils.rm_rf("Build") 
end

desc 'Install ESP toolchain on top of base Arduino Installation'
task :esp32Install do 
  installCmd = <<~STRING.delete("\n")
    #{$OS_Config[:arduinoCmd]} --pref boardsmanager.additional.urls=
    https://dl.espressif.com/dl/package_esp32_index.json 
    --save-prefs 
  STRING
  system installCmd
  system "#{$OS_Config[:arduinoCmd]} --install-boards esp32:esp32"
end

task build: %[app:build]

task default: %[build]
